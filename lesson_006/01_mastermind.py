# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

# TODO здесь ваш код...

import random

number = []
NN = {'bulls': 0, 'cows': 0}
user_input = None


def secret():
    global number
    # number = random.randint(1000, 9000)
    number = random.sample(range(10), 4)
    print(number)
    if number[0] == 0:
        number = list(random.sample(range(10), 4))
    number = (str(number[0]) + str(number[1]) + str(number[2]) + str(number[3]))
    print(number)

secret()

def enter():
    global user_input
    user_input = input('Введите четырехзначное число:', )
    user_input = list(user_input)
    if len(user_input) != 4:
        enter()

enter()

def check():
    global number
    global user_input
    global NN
    number = str(number)
    # number = str(number)
    print(number)
    # user_input = list(user_input)
    # if len(user_input) != 4:
    #     user_input
    print(user_input)
    if len(number) == len(user_input):
        for y in range(len(number)):
            y = 0
            x = 0
            # с = x.count(i)
            for i in range(len(number)):
                if user_input[i] == number[i]:
                    y = y + 1
                elif number.count(user_input[i]):
                    x = x + 1
        NN = {'bulls': y, 'cows': x}
        print(NN)




check()

while True:
    secret()
    user_input = input('Введите четырехзначное число:', )
    check()
